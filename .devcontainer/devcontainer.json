{
  "name": "pup",
  // Select between image and build propieties to pull or build the image.
  // "image": "docker.io/espressif/idf-rust:esp32_latest",
  "build": {
    "dockerfile": "Dockerfile",
    "args": {
      "CONTAINER_USER": "esp",
      "CONTAINER_GROUP": "esp",
      "ESP_BOARD": "esp32"
    },
    "options": ["--network=host"]
  },
  // https://github.com/serialport/serialport-rs/issues/153
  "runArgs": [
    "--privileged",
    "--device-cgroup-rule=c 188:* rmw"
  ],
  // Use volumes for everything to avoid Windows filesystem performance issues
  "mounts": [
    // Mount entire workspace to volume for maximum performance
    "source=pup-workspace,target=/home/esp/pup,type=volume",
    // Mount cargo registry and git to avoid re-downloading on container rebuild
    "source=cargo-registry,target=/usr/local/cargo/registry,type=volume",
    "source=cargo-git,target=/usr/local/cargo/git,type=volume",
    // Temporary mount for initial sync
    "source=${localWorkspaceFolder},target=/tmp/host-workspace,type=bind,readonly"
  ],
  "workspaceFolder": "/home/esp/pup",
  // Ensure volumes exist
  "initializeCommand": [
    "bash", "-c", "docker volume create pup-workspace 2>/dev/null || true; docker volume create cargo-registry 2>/dev/null || true; docker volume create cargo-git 2>/dev/null || true"
  ],
  "postCreateCommand": [
    "bash", "-c", "set -e; if [ ! -f /home/esp/pup/Cargo.toml ]; then echo 'Syncing code from host to volume...'; ls -la /tmp/host-workspace/; cp -rv /tmp/host-workspace/. /home/esp/pup/; ls -la /home/esp/pup/; echo 'Code sync complete. All operations now use fast volumes.'; else echo 'Code already synced to volume.'; fi"
  ],
  "customizations": {
    "vscode": {
      "settings": {
        "editor.formatOnPaste": true,
        "editor.formatOnSave": true,
        "editor.formatOnSaveMode": "file",
        "editor.formatOnType": true,
        "lldb.executable": "/usr/bin/lldb",
        "files.watcherExclude": {
          "**/target/**": true
        },
        "rust-analyzer.checkOnSave.command": "clippy",
        "rust-analyzer.checkOnSave.allTargets": false,
        "rust-analyzer.cargo.buildScripts.enable": true,
        "rust-analyzer.procMacro.enable": true,
        // Optimize Rust analyzer for performance
        "rust-analyzer.cargo.loadOutDirsFromCheck": true,
        "rust-analyzer.completion.autoimport.enable": false,
        // Use target directory in volume for better performance
        "rust-analyzer.cargo.targetDir": "target",
        "[rust]": {
          "editor.defaultFormatter": "rust-lang.rust-analyzer"
        }
      },
      "extensions": [
        "rust-lang.rust-analyzer",
        "tamasfe.even-better-toml",
        "serayuzgur.crates",
        "mutantdino.resourcemonitor",
        "yzhang.markdown-all-in-one",
        "ms-vscode.cpptools",
        "actboy168.tasks",
        "Wokwi.wokwi-vscode"
      ]
    }
  },
  "forwardPorts": [3333, 8000]
}
